"""
Объявите класс RadiusVector2D, объекты которого должны создаваться командами:

v1 = RadiusVector2D()        # радиус-вектор с координатами (0; 0)
v2 = RadiusVector2D(1)       # радиус-вектор с координатами (1; 0)
v3 = RadiusVector2D(1, 2)    # радиус-вектор с координатами (1; 2)
В каждом объекте класса RadiusVector2D должны формироваться локальные
приватные атрибуты:

__x, __y - координаты конца вектора (изначально значения равны 0, если не
передано какое-либо другое).

В классе RadiusVector2D необходимо объявить два объекта-свойства:

x - для изменения и считывания локального атрибута __x;
y - для изменения и считывания локального атрибута __y.

При инициализации и изменении локальных атрибутов, необходимо проверять
корректность передаваемых значений:

- значение должно быть числом (целым или вещественным) в диапазоне [MIN_COORD;
MAX_COORD].

Если проверка не проходит, то координаты не меняются (напомню, что при
инициализации они изначально равны 0). Величины MIN_COORD = -100,
MAX_COORD = 1024 задаются как публичные атрибуты класса RadiusVector2D.

Также в классе RadiusVector2D необходимо объявить статический метод:

norm2(vector) - для вычисления квадратической нормы vector - переданного
объекта класса RadiusVector2D (квадратическая норма вектора: x*x + y*y).

P.S. В программе требуется объявить только класс. На экран ничего выводить
не нужно.
"""


class RadiusVector2D:
    """
    Класс, представляет двумерный радиус-вектор.

    :cvar MIN_COORD: Минимальное значение координаты. По умолчанию -100.
    :cvar MAX_COORD: Максимальное значение координаты. По умолчанию 1024.
    """

    MIN_COORD: int = -100
    MAX_COORD: int = 1024

    def __init__(self, x: int | float = 0, y: int | float = 0) -> None:
        """
        Инициализация объекта RadiusVector2D.

        :param x: Координата x. По умолчанию 0.
        :param y: Координата y. По умолчанию 0.
        """
        self.__x = self.__y = 0
        self.x = x
        self.y = y

    @property
    def x(self) -> int | float:
        """
        Возвращает значение координаты x.

        :return: Значение координаты x.
        """
        return self.__x

    @x.setter
    def x(self, x: int | float) -> None:
        """
        Устанавливает значение координаты x.

        :param x: Новое значение координаты x.
        :note: Если значение не проходит проверку, координата не изменяется.
        """
        if isinstance(x, (int, float)) and \
                self.MIN_COORD <= x <= self.MAX_COORD:
            self.__x = x

    @property
    def y(self) -> int | float:
        """
        Возвращает значение координаты y.

        :return: Значение координаты y.
        """
        return self.__y

    @y.setter
    def y(self, y: int | float) -> None:
        """
        Устанавливает значение координаты y.

        :param y: Новое значение координаты y.
        :note: Если значение не проходит проверку, координата не изменяется.
        """
        if isinstance(y, (int, float)) and \
                self.MIN_COORD <= y <= self.MAX_COORD:
            self.__y = y

    @staticmethod
    def norm2(vector: 'RadiusVector2D') -> int | float:
        """
        Вычисляет квадратическую норму вектора.

        :param vector: Объект класса RadiusVector2D.
        :return: Квадратическая норма вектора (x² + y²).
        """
        return vector.x**2 + vector.y**2

