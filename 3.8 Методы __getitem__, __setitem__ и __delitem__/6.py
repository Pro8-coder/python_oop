"""
Объявите в программе класс с именем RadiusVector (радиус-вектор), объекты
которого создаются командой:

v = RadiusVector(x1, x2,..., xN)
где x1, x2,..., xN - координаты радиус-вектора (числа: целые или вещественные).

В каждом объекте класса RadiusVector должен быть локальный атрибут:

coords - список из координат радиус-вектора.

Для доступа к отдельным координатам, реализовать следующий функционал:

coord = v[i] # получение значения i-й координаты (целое число, отсчет с нуля)
coords_1 = v[start:stop] # получение среза (набора) координат в виде кортежа
coords_2 = v[start:stop:step] # получение среза (набора) координат в виде
кортежа
v[i] = value # изменение i-й координаты
v[start:stop] = [val_1, val_2, ...] # изменение сразу нескольких координат
v[start:stop:step] = [val_1, val_2, ...] # изменение сразу нескольких координат
Пример использования класса (эти строчки в программе не писать):

v = RadiusVector(1, 1, 1, 1)
print(v[1]) # 1
v[:] = 1, 2, 3, 4
print(v[2]) # 3
print(v[1:]) # (2, 3, 4)
v[0] = 10.5
P.S. При передаче среза в магических методах __setitem__() и __getitem__()
параметр индекса становится объектом класса slice. Его можно указывать
непосредственно в квадратных скобках упорядоченных коллекций (списков,
кортежей и т.п.).
"""
from typing import TypeVar

T = TypeVar('T', int, float)


class RadiusVector:
    """
    Класс для представления радиус-вектора с произвольным числом координат.

    Поддерживает доступ к координатам по индексу и срезам, а также их
    модификацию. Все координаты должны быть числами (int или float).

    :ivar coords: Список координат вектора
    """

    def __init__(self, *coords: T) -> None:
        self.coords: list[T] = list(coords)

    def __getitem__(self, item: int | slice) -> T | tuple[T, ...]:
        """
        Возвращает координату или срез координат.

        :param item: Индекс или срез для получения координат
        :return: Значение координаты или кортеж координат для среза
        :rtype: T | Tuple[T, ...]
        """
        if type(item) == slice:
            return tuple(self.coords[item])

        return self.coords[item]

    def __setitem__(self, key: int | slice, value: T | list[T, ...]) -> None:
        """
        Устанавливает новое значение координаты или среза координат.

        :param key: Индекс или срез для изменения координат
        :param value: Новое значение или список значений
        :type value: T | List[T]
        :raises TypeError: Если тип значения не соответствует типу координат
        """
        if type(key) == slice:
            self.coords[key.start:key.stop:key.step] = value

        self.coords[key] = value

