"""
Необходимо объявить класс-декоратор с именем HandlerGET, который будет
имитировать обработку GET-запросов на стороне сервера. Для этого сам класс
HandlerGET нужно оформить так, чтобы его можно было применять к любой функции
как декоратор. Например:

@HandlerGET
def contact(request):
    return "Сергей Балакирев"
Здесь request - это произвольный словарь с данными текущего запроса, например,
такой: {"method": "GET", "url": "contact.html"}. А функция должна возвращать
строку.

Затем, при вызове декорированной функции:

res = contact({"method": "GET", "url": "contact.html"})
должна возвращаться строка в формате:

"GET: <данные из функции>"

В нашем примере - это будет:

"GET: Сергей Балакирев"

Если ключ method в словаре request отсутствует, то по умолчанию
подразумевается GET-запрос. Если же ключ method принимает другое значение,
например, "POST", то декорированная функция contact должна возвращать значение
None.

Для реализации имитации GET-запроса в классе HandlerGET следует объявить
вспомогательный метод со следующей сигнатурой:

def get(self, func, request, *args, **kwargs): ...
Здесь func - ссылка на декорируемую функцию; request - словарь с переданными
данными при вызове декорированной функции. Именно в этом методе следует
формировать возвращаемую строку в указанном формате:

"GET: Сергей Балакирев"

P.S. В программе достаточно объявить только класс. Ничего на экран выводить не
нужно.
"""


class HandlerGET:
    """
    Класс-декоратор для обработки GET-запросов.

    Декорированная функция возвращает строку в формате "GET: <данные из
    функции>", если метод запроса — GET. В противном случае возвращает None.

    :ivar func: Декорируемая функция.
    """

    def __init__(self, func: callable) -> None:
        self.func = func

    def __call__(self, request: dict, *args, **kwargs) -> None | str:
        """
        Обрабатывает вызов декорированной функции.

        :param request: Словарь с данными запроса (должен содержать ключ
        "method").
        :return: Строка в формате "GET: <данные из функции>" или None.
        """
        if request.get("method", "GET") == "GET":
            return self.get(self.func, request, *args, **kwargs)

        return None

    def get(self, func: callable, request: dict, *args, **kwargs) -> str:
        """
        Формирует строку с результатом выполнения функции для GET-запроса.

        :param func: Декорируемая функция.
        :param request: Словарь с данными запроса.
        :return: Строка в формате "GET: <данные из функции>".
        """
        return f"GET: {func(request, *args, **kwargs)}"

