"""
Создается проект, в котором предполагается использовать списки из целых чисел.
Для этого вам ставится задача создать класс с именем ListInteger с базовым
классом list и переопределить три метода:

__init__()
__setitem__()
append()

так, чтобы список ListInteger содержал только целые числа. При попытке
присвоить любой другой тип данных, генерировать исключение командой:

raise TypeError('можно передавать только целочисленные значения')
Пример использования класса ListInteger (эти строчки в программе не писать):

s = ListInteger((1, 2, 3))
s[1] = 10
s.append(11)
print(s)
s[0] = 10.5 # TypeError
P.S. В программе нужно объявить только класс. На экран выводить ничего
не нужно.
"""


class ListInteger(list):
    """
    Список, который может содержать только целые числа.

    Наследуется от встроенного класса list и добавляет проверку типа элементов.
    При попытке добавить элемент нецелого типа вызывает исключение TypeError.
    """

    def __init__(self, iterable: tuple[int, ...]) -> None:
        """
        Инициализирует список целых чисел.

        :param iterable: Кортеж целых чисел для инициализации списка
        :raises TypeError: Если любой элемент не является целым числом
        """
        if any(type(i) != int for i in iterable):
            raise TypeError('можно передавать только целочисленные значения')

        super().__init__(iterable)

    def __setitem__(self, index: int, value: int) -> None:
        """
        Устанавливает значение элемента по индексу.

        :param index: Индекс элемента
        :param value: Новое значение элемента (должно быть целым числом)
        :raises TypeError: Если значение не является целым числом
        """
        if type(value) != int:
            raise TypeError('можно передавать только целочисленные значения')

        super().__setitem__(index, value)

    def append(self, value: int) -> None:
        """
        Добавляет элемент в конец списка.

        :param value: Значение для добавления (должно быть целым числом)
        :raises TypeError: Если значение не является целым числом
        """
        if type(value) != int:
            raise TypeError('можно передавать только целочисленные значения')

        super().append(value)

