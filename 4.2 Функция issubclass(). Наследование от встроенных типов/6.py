"""
Объявите в программе базовый класс с именем IteratorAttrs для перебора всех
локальных атрибутов объектов класса. Напомню, что для этого используются два
магических метода:

__iter__() - для получения объекта-итератора (в данном случае - это сам объект
self)
__next__() - для перебора локальных атрибутов объекта self (используйте для
этого словарь __dict__)

Метод __next__() на каждой итерации должен возвращать кортеж в формате: (имя
атрибута, значение).

Подсказка: здесь можно определить один метод __iter__() как функцию-генератор.

Объявите дочерний класс SmartPhone, объекты которого создаются командой:

phone = SmartPhone(model, size, memory)
где model - модель смартфона (строка); size - габариты (ширина, длина) в виде
кортежа двух чисел; memory - размер ОЗУ (памяти), как целое число. В каждом
объекте класса SmartPhone должны создаваться соответствующие локальные
атрибуты: model, size, memory.

Благодаря наследованию от базового класса IteratorAttrs, с объектами класса
SmartPhone должен выполняться оператор for:

for attr, value in phone:
    print(attr, value)
P.S. В программе нужно объявить только классы. На экран выводить ничего
не нужно.
"""
from typing import Any


class IteratorAttrs:
    """
    Базовый класс для итерации по атрибутам объекта.

    Реализует протокол итератора, позволяя перебирать все локальные атрибуты
    объекта.
    """

    def __iter__(self) -> tuple[str, Any]:
        """
        Генератор для перебора атрибутов объекта.

        :yields: Кортеж (имя атрибута, значение) для каждого атрибута
        """
        for attr, value in self.__dict__.items():
            yield attr, value


class SmartPhone(IteratorAttrs):
    """
    Класс, представляющий смартфон с возможностью итерации по атрибутам.

    :ivar model: Модель смартфона
    :ivar size: Габариты устройства (ширина, длина)
    :ivar memory: Объем оперативной памяти в МБ
    """

    def __init__(self, model: str, size: tuple[int | float, int | float],
                 memory: int) -> None:
        self.model = model
        self.size = size
        self.memory = memory

