"""
Объявите класс с именем Complex для представления и работы с комплексными
числами. Объекты этого класса должны создаваться командой:

cm = Complex(real, img)
где real - действительная часть комплексного числа (целое или вещественное
значение); img - мнимая часть комплексного числа (целое или вещественное
значение).

Объявите в этом классе следующие объекты-свойства (property):

real - для записи и считывания действительного значения;
img - для записи и считывания мнимого значения.

При записи новых значений необходимо проверять тип передаваемых данных. Если
тип не соответствует целому или вещественному числу, то генерировать
исключение командой:

raise ValueError("Неверный тип данных.")
Также с объектами класса Complex должна поддерживаться функция:

res = abs(cm)
возвращающая модуль комплексного числа (вычисляется по формуле: sqrt(
real*real + img*img) - корень квадратный от суммы квадратов действительной и
мнимой частей комплексного числа).

Создайте объект cmp класса Complex для комплексного числа с real = 7 и
img = 8. Затем, через объекты-свойства real и img измените эти значения на
real = 3 и img = 4. Вычислите модуль полученного комплексного числа (сохраните
результат в переменной c_abs).

P.S. На экран ничего выводить не нужно.
"""


class Complex:
    """
    Класс для представления и работы с комплексными числами.

    :ivar real: Действительная часть комплексного числа.
    :ivar img: Мнимая часть комплексного числа.
    """

    def __init__(self, real: int | float, img: int | float) -> None:
        self.__real = real
        self.__img = img

    @property
    def real(self) -> int | float:
        """
        Возвращает действительную часть комплексного числа.

        :return: Действительная часть комплексного числа.
        """
        return self.__real

    @real.setter
    def real(self, new_real: int | float) -> None:
        """
        Устанавливает новое значение для действительной части комплексного
        числа.

        :param new_real: Новое значение действительной части.
        :raises ValueError: Если тип данных не соответствует int или float.
        """
        if isinstance(new_real, (int, float)):
            self.__real = new_real
        else:
            raise ValueError("Неверный тип данных.")

    @property
    def img(self) -> int | float:
        """
        Возвращает мнимую часть комплексного числа.

        :return: Мнимая часть комплексного числа.
        """
        return self.__img

    @img.setter
    def img(self, new_img: int | float) -> None:
        """
        Устанавливает новое значение для мнимой части комплексного числа.

        :param new_img: Новое значение мнимой части.
        :raises ValueError: Если тип данных не соответствует int или float.
        """
        if isinstance(new_img, (int, float)):
            self.__img = new_img
        else:
            raise ValueError("Неверный тип данных.")

    def __abs__(self) -> float:
        """
        Вычисляет модуль комплексного числа.

        :return: Модуль комплексного числа.
        """
        return (self.__real ** 2 + self.__img ** 2) ** 0.5


cmp = Complex(7, 8)
cmp.real = 3
cmp.img = 4
c_abs = abs(cmp)
