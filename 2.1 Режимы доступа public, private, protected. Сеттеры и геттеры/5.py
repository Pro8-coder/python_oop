"""
Объявите в программе два класса Point и Rectangle. Объекты первого класса
должны создаваться командой:

pt = Point(x, y)
где x, y - координаты точки на плоскости (целые или вещественные числа). При
этом в объектах класса Point должны формироваться следующие локальные свойства:

__x, __y - координаты точки на плоскости.

и один геттер:

get_coords() - возвращение кортежа текущих координат __x, __y

Объекты второго класса Rectangle (прямоугольник) должны создаваться командами:

r1 = Rectangle(Point(x1, y1), Point(x2, y2))
или

r2 = Rectangle(x1, y1, x2, y2)
Здесь первая координата (x1, y1) - верхний левый угол, а вторая координата
(x2, y2) - правый нижний. При этом, в объектах класса Rectangle (вне
зависимости от способа их создания) должны формироваться следующие локальные
свойства:

__sp - объект класса Point с координатами x1, y1 (верхний левый угол);
__ep - объект класса Point с координатами x2, y2 (нижний правый угол).

Также к классе Rectangle должны быть реализованы следующие методы:

set_coords(self, sp, ep) - изменение текущих координат, где sp, ep - объекты
класса Point;
get_coords(self) - возвращение кортежа из объектов класса Point с текущими
координатами прямоугольника (ссылки на локальные свойства __sp и __ep);
draw(self) - отображение в консоли сообщения: "Прямоугольник с координатами:
(x1, y1) (x2, y2)". Здесь x1, y1, x2, y2 - соответствующие числовые значения
координат.

Создайте объект rect класса Rectangle с координатами (0, 0), (20, 34).

P.S. На экран ничего выводить не нужно.
"""
from typing import Union, Tuple


class Point:
    """Класс для представления точки на плоскости."""

    def __init__(self, x: Union[int, float], y: Union[int, float]) -> None:
        """
        Инициализирует точку с координатами (x, y).

        :param x: Координата X.
        :param y: Координата Y.
        """
        self.__x = x
        self.__y = y

    def get_coords(self) -> Tuple[Union[int, float], Union[int, float]]:
        """
        Возвращает координаты точки.

        :return: Кортеж с координатами (x, y).
        """
        return self.__x, self.__y


class Rectangle:
    """Класс для представления прямоугольника на плоскости."""

    def __init__(self, *args: Tuple[Union[int, float, Point]]) -> None:
        """
        Инициализирует прямоугольник.

        :param args: Либо два объекта Point, либо четыре числа.
        """
        if len(args) == 2:
            self.__sp: 'Point' = args[0]
            self.__ep: 'Point' = args[1]
        else:
            self.__sp: 'Point' = Point(args[0], args[1])
            self.__ep: 'Point' = Point(args[2], args[3])

    def set_coords(self, sp: Point, ep: Point) -> None:
        """
        Устанавливает новые координаты прямоугольника.

        :param sp: Верхний левый угол (объект Point).
        :param ep: Нижний правый угол (объект Point).
        """
        self.__sp = sp
        self.__ep = ep

    def get_coords(self) -> Tuple[Point, Point]:
        """
        Возвращает текущие координаты прямоугольника.

        :return: Кортеж из двух объектов Point.
        """
        return self.__sp, self.__ep

    def draw(self) -> None:
        """
        Выводит в консоль сообщение с координатами прямоугольника.
        """
        x1, y1 = self.__sp.get_coords()
        x2, y2 = self.__ep.get_coords()
        print(f"Прямоугольник с координатами: {x1, y1} {x2, y2}")


rect = Rectangle(0, 0, 20, 34)
