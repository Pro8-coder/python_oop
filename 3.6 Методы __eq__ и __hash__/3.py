"""
Объявите класс с именем DataBase (база данных - БД), объекты которого
создаются командой:

db = DataBase(path)
где path - путь к файлу с данными БД (строка).

Также в классе DataBase нужно объявить следующие методы:

write(self, record) - для добавления новой записи в БД, представленной
объектом record;
read(self, pk) - чтение записи из БД (возвращает объект Record) по ее
уникальному идентификатору pk (уникальное целое положительное число); запись
ищется в значениях словаря (см. ниже)

Каждая запись БД должна описываться классом Record, а объекты этого класса
создаваться командой:

record = Record(fio, descr, old)
где fio - ФИО некоторого человека (строка); descr - характеристика человека
(строка); old - возраст человека (целое число).

В каждом объекте класса Record должны формироваться следующие локальные
атрибуты:

pk - уникальный идентификатор записи (число: целое, положительное);
формируется автоматически при создании каждого нового объекта;
fio - ФИО человека (строка);
descr - характеристика человека (строка);
old - возраст человека (целое число).

Реализовать для объектов класса Record вычисление хэша по атрибутам: fio и old
(без учета регистра). Если они одинаковы для разных записей, то и хэши должны
получаться равными. Также для объектов класса Record  с одинаковыми хэшами
оператор == должен выдавать значение True, а с разными хэшами - False.

Хранить записи в БД следует в виде словаря dict_db (атрибут объекта db класса
DataBase), ключами которого являются объекты класса Record, а значениями
список из объектов с равными хэшами:

dict_db[rec1] = [rec1, rec2, ..., recN]

где rec1, rec2, ..., recN - объекты класса Record с одинаковыми хэшами.

Для наполнения БД прочитайте строки из входного потока с помощью команды:

lst_in = list(map(str.strip, sys.stdin.readlines()))
где каждая строка представлена в формате:

"ФИО; характеристика; возраст"

Например:

Балакирев С.М.; программист; 33
Кузнецов А.В.; разведчик-нелегал; 35
Суворов А.В.; полководец; 42
Иванов И.И.; фигурант всех подобных списков; 26
Балакирев С.М.; преподаватель; 37

Каждая строка должна быть представлена объектом класса Record и записана в
БД db (в словарь db.dict_db).

P.S. На экран ничего выводить не нужно.

Sample Input:

Балакирев С.М.; программист; 33
Кузнецов Н.И.; разведчик-нелегал; 35
Суворов А.В.; полководец; 42
Иванов И.И.; фигурант всех подобных списков; 26
Балакирев С.М.; преподаватель; 33
Sample Output:
"""
import sys


class Record:
    """
    Класс для представления записи в базе данных.

    :cvar __pk: Приватный атрибут класса, используемый для генерации
    уникального идентификатора pk.
    :ivar fio: ФИО человека.
    :ivar descr: Характеристика человека.
    :ivar old: Возраст человека.
    :ivar pk: Уникальный идентификатор записи (генерируется автоматически).
    """

    __pk = 0

    def __init__(self, fio: str, descr: str, old: int) -> None:
        self.fio = fio
        self.descr = descr
        self.old = int(old)

    def __new__(cls, *args, **kwargs) -> 'Record':
        """
        Создает объект Record и присваивает уникальный идентификатор pk.

        :return: Экземпляр класса Record.
        """
        instance = super().__new__(cls)
        cls.__pk += 1
        instance.pk = cls.__pk
        return instance

    def __hash__(self) -> int:
        """
        Вычисляет хэш объекта на основе ФИО (без учета регистра) и возраста.

        :return: Целочисленный хэш.
        """
        return hash((self.fio.lower(), self.old))

    def __eq__(self, other: 'Record') -> bool:
        """
        Сравнивает объекты Record по их хэшам.

        :param other: Другой объект Record.
        :return: True, если хэши равны, иначе False.
        """
        return hash(self) == hash(other)

    def __str__(self) -> str:
        """
        Возвращает строковое представление объекта Record.

        :return: Строка в формате "ФИО, характеристика, возраст,
        pk=идентификатор".
        """
        return f"{self.fio}, {self.descr}, {self.old}, pk={self.pk}"

    def __repr__(self) -> str:
        """
        Возвращает строковое представление объекта Record для отладки.

        :return: Строка в формате "ФИО, характеристика, возраст,
        pk=идентификатор".
        """
        return self.__str__()


class DataBase:
    """
    Класс для представления базы данных.

    :ivar path: Путь к файлу базы данных.
    :ivar dict_db: Словарь для хранения записей. Ключи — объекты Record,
    значения — списки объектов с одинаковыми хэшами.
    """

    def __init__(self, path: str) -> None:
        self.path = path
        self.dict_db: dict[Record: list[Record]] = {}

    def write(self, record: Record) -> None:
        """
        Добавляет запись в базу данных.

        :param record: Объект Record для добавления.
        """
        if record in self.dict_db:
            self.dict_db[record].append(record)
        else:
            self.dict_db[record] = [record]

    def read(self, pk: int) -> Record | None:
        """
        Ищет запись в базе данных по уникальному идентификатору pk.

        :param pk: Уникальный идентификатор записи (целое число).
        :return: Объект Record, если запись найдена, иначе None (не явно).
        """
        for records in self.dict_db.values():
            for record in records:
                if record.pk == pk:
                    return record


lst_in = list(map(str.strip, sys.stdin.readlines()))
db = DataBase('path/to/database')
[db.write(Record(*line.split('; '))) for line in lst_in]
