"""
Вам необходимо объявить базовый класс ShopInterface с абстрактным методом:

def get_id(self): ...
В самом методе должно генерироваться исключение командой:

raise NotImplementedError('в классе не переопределен метод get_id')
Инициализатор в классе ShopInterface прописывать не нужно.

Далее объявите дочерний класс ShopItem (от базового класса ShopInterface),
объекты которого создаются командой:

item = ShopItem(name, weight, price)
где name - название товара (строка); weight - вес товара (любое положительное
число); price - цена товара (любое положительное число).

В каждом объекте класса ShopItem должны формироваться локальные атрибуты с
именами _name, _weight, _price и соответствующими значениями. Также в объектах
класса ShopItem должен автоматически формироваться локальный приватный атрибут
__id с уникальным (для каждого товара) целым значением.

В классе ShopItem необходимо переопределить метод get_id() базового класса
так, чтобы он (метод) возвращал значение атрибута __id.

P.S. В программе требуется объявить только классы. На экран выводить ничего
не нужно.
"""


class ShopInterface:
    """
    Базовый абстрактный класс для магазина.

    Определяет интерфейс для получения идентификатора товара.
    """

    def get_id(self):
        """
        Абстрактный метод для получения идентификатора.

        :raises NotImplementedError: Если метод не переопределен в дочернем
        классе
        """
        raise NotImplementedError('в классе не переопределен метод get_id')


class ShopItem(ShopInterface):
    """
    Класс товара магазина, реализующий интерфейс ShopInterface.

    :cvar __id_counter: Счетчик для генерации уникальных идентификаторов
    товаров
    :ivar _name: Название товара
    :ivar _weight: Вес товара (положительное число)
    :ivar _price: Цена товара (положительное число)
    :ivar __id: Уникальный идентификатор товара
    """

    __id_counter = 0

    def __init__(self, name: str, weight: int | float, price: int | float
                 ) -> None:
        self._name = name
        self._weight = weight
        self._price = price
        ShopItem.__id_counter += 1
        self.__id = self.__id_counter

    def get_id(self) -> int:
        """
        Возвращает уникальный идентификатор товара.

        :return: Уникальный ID товара
        """
        return self.__id

