"""
Объявите дескриптор данных FloatValue, который бы устанавливал и возвращал
вещественные значения. При записи вещественного числа должна выполняться
проверка на вещественный тип данных. Если проверка не проходит, то
генерировать исключение командой:

raise TypeError("Присваивать можно только вещественный тип данных.")
Объявите класс Cell, в котором создается объект value дескриптора FloatValue.
А объекты класса Cell должны создаваться командой:

cell = Cell(начальное значение ячейки)
Объявите класс TableSheet, с помощью которого создается таблица из N строк и
M столбцов следующим образом:

table = TableSheet(N, M)
Каждая ячейка этой таблицы должна быть представлена объектом класса Cell,
работать с вещественными числами через объект value (начальное значение
должно быть 0.0).

В каждом объекте класса TableSheet должен формироваться локальный атрибут:

cells - список (вложенный) размером N x M, содержащий ячейки таблицы (объекты
класса Cell).

Создайте объект table класса TableSheet с размером таблицы N = 5, M = 3.
Запишите в эту таблицу числа от 1.0 до 15.0 (по порядку, построчно).

P.S. На экран в программе выводить ничего не нужно.
"""


class FloatValue:
    """
    Дескриптор для проверки типа данных. Если значение не является
    вещественным числом, выбрасывает исключение TypeError.
    """

    def __set_name__(self, owner: type, name: str) -> None:
        """
        Устанавливает имя атрибута, к которому привязан дескриптор.

        :param owner: Класс, в котором определён дескриптор.
        :param name: Имя атрибута, к которому привязан дескриптор.
        """
        self.name = "_" + name

    def __get__(self, instance: object, owner: type) -> float:
        """
        Возвращает значение атрибута.

        :param instance: Экземпляр класса, в котором определён дескриптор.
        :param owner: Класс, в котором определён дескриптор.
        :return: Значение атрибута.
        """
        return instance.__dict__[self.name]

    def __set__(self, instance: object, value: float) -> None:
        """
        Устанавливает значение атрибута.

        :param instance: Экземпляр класса, в котором определён дескриптор.
        :param value: Значение, которое нужно присвоить атрибуту.
        :raises TypeError: Если значение не является вещественным числом.
        """
        if not isinstance(value, float):
            raise TypeError(
                "Присваивать можно только вещественный тип данных.")
        instance.__dict__[self.name] = value


class Cell:
    """
    Класс для представления ячейки таблицы.

    :cvar value: Значение ячейки, управляемое дескриптором FloatValue.
    """

    value = FloatValue()

    def __init__(self, value: float = 0.0) -> None:
        """
        Инициализация объекта Cell (ячейки).

        :param value: Начальное значение ячейки (по умолчанию 0.0).
        """
        self.value = value


class TableSheet:
    """Класс для создания таблицы из ячеек."""

    def __init__(self, n: int, m: int) -> None:
        """
        Инициализация объекта TableSheet (таблицы размером N x M).

        :param n: Количество строк.
        :param m: Количество столбцов.
        """
        self.n = n
        self.m = m
        self.cells: list[list[Cell]] = \
            [[Cell(0.0) for _ in range(m)] for _ in range(n)]


table = TableSheet(5, 3)
counter = 1.0
for i in range(5):
    for j in range(3):
        table.cells[i][j].value = counter
        counter += 1.0
