"""
Иногда наследование используют, чтобы наделить объекты дочерних классов
определенным набором атрибутов. Сделаем такой пример.

Предположим, вы разрабатываете программу для интернет-магазина. В этом
магазине могут быть как реальные (физические) товары, так и электронные.
Для этих двух групп, очевидно, нужен разный набор атрибутов:

- для реальных физических товаров: id, name, price, weight, dims

где id - идентификатор товара (целое число); name - наименование товара
(строка); price - цена товара (вещественное число); weight - вес товара
(вещественное число); dims = (lenght, width, depth) - длина, ширина, глубина -
габариты товара (вещественные числа);

- для электронных товаров: id, name, price, memory, frm

где id - идентификатор товара (целое число); name - наименование товара
(строка); price - цена товара (вещественное число); memory - занимаемый размер
(в байтах - целое число); frm - формат данных (строка: pdf, docx и т.п.)

Так как все товары могут идти вперемешку, то мы хотим, чтобы в каждом объекте
(для товара) присутствовали все атрибуты:

id, name, price, weight, dims, memory, frm

с начальными значениями None. А уже, затем, нужным из них будут присвоены
конкретные данные.

Для реализации этой логики объявите в программе базовый класс с именем Thing
(вещь, предмет), объекты которого могут создаваться командой:

th = Thing(name, price)
А атрибут id должен формироваться автоматически и быть уникальным для каждого
товара (например, можно для каждого нового объекта увеличивать на единицу).

В объектах класса Thing должен формироваться полный набор локальных атрибутов
(id, name, price, weight, dims, memory, frm) со значением None, кроме
атрибутов: id, name, price.

Далее, нужно объявить два дочерних класса:

Table - для столов;
ElBook - для электронных книг.

Объекты этих классов должны создаваться командами:

table = Table(name, price, weight, dims)
book = ElBook(name, price, memory, frm)
Причем, атрибуты name, price (а также id) следует инициализировать в базовом
классе, т.к. они общие для всех товаров. Остальные атрибуты должны либо
принимать значение None, если не используются, либо инициализироваться
конкретными значениями уже в дочерних классах.

Наконец, в базовом классе Thing объявите метод:

get_data() - для получения кортежа в формате (id, name, price, weight, dims,
memory, frm)

Пример использования классов (эти строчки в программе писать не нужно):

table = Table("Круглый", 1024, 812.55, (700, 750, 700))
book = ElBook("Python ООП", 2000, 2048, 'pdf')
print(*table.get_data())
print(*book.get_data())
P.S. В программе нужно объявить только классы. Выводить на экран ничего
не нужно.
"""


class Thing:
    """
    Базовый класс для представления товаров в интернет-магазине.

    :cvar _ID: Счётчик для генерации уникальных идентификаторов товаров
    :ivar id: Уникальный идентификатор товара
    :ivar name: Наименование товара
    :ivar price: Цена товара
    :ivar weight: Вес товара (None для электронных товаров)
    :ivar dims: Габариты товара (None для электронных товаров)
    :vartype dims: tuple[float, float, float] | None
    :ivar memory: Размер в байтах (None для физических товаров)
    :ivar frm: Формат данных (None для физических товаров)
    """

    _ID = 0

    def __init__(self, name: str, price: float) -> None:
        """
        Инициализирует базовый товар.

        :param name: Наименование товара
        :param price: Цена товара
        """
        Thing._ID += 1
        self.id = Thing._ID
        self.name = name
        self.price = price
        self.weight = None
        self.dims = None
        self.memory = None
        self.frm = None

    def get_data(self) -> tuple[int, str, float, float | None,
                                tuple[float, float, float] | None,
                                int | None, str | None]:
        """
        Возвращает кортеж с полными данными о товаре.

        :return: Кортеж в формате (id, name, price, weight, dims, memory, frm)
        """
        return (self.id, self.name, self.price, self.weight, self.dims,
                self.memory, self.frm)


class Table(Thing):
    """
    Класс для представления столов (физических товаров).

    :ivar weight: Вес стола в кг
    :ivar dims: Габариты стола (длина, ширина, глубина) в мм
    :vartype dims: tuple[float, float, float]
    """

    def __init__(self, name: str, price: float, weight: float,
                 dims: tuple[float, float, float]) -> None:
        """
        Инициализирует стол как физический товар.

        :param name: Наименование стола
        :param price: Цена стола
        :param weight: Вес стола в кг
        :param dims: Габариты (длина, ширина, глубина) в мм
        """
        super().__init__(name, price)
        self.weight = weight
        self.dims = dims


class ElBook(Thing):
    """
    Класс для представления электронных книг.

    :ivar memory: Размер файла в байтах
    :ivar frm: Формат электронной книги
    """

    def __init__(self, name: str, price: float, memory: int, frm: str) -> None:
        """
        Инициализирует электронную книгу.

        :param name: Название книги
        :param price: Цена книги
        :param memory: Размер файла в байтах
        :param frm: Формат книги (pdf, epub и т.д.)
        """
        super().__init__(name, price)
        self.memory = memory
        self.frm = frm

