"""
С помощью наследования можно как бы "наполнять" дочерние классы нужными
качествами (свойствами). Как пример, объявите в программе класс с именем:

Singleton

который бы позволял создавать только один экземпляр (все последующие
экземпляры должны ссылаться на первый). Как это делать, вы должны уже знать
из этого курса.

Затем, объявите еще один класс с именем:

Game

который бы наследовался от класса Singleton. Объекты класса Game должны
создаваться командой:

game = Game(name)
где name - название игры (строка). В каждом объекте класса Game должен
создаваться атрибут name с соответствующим содержимым.

Убедитесь, что атрибут name принимает значение первого созданного объекта
(если это не так, то поправьте инициализатор дочернего класса, чтобы это
условие выполнялось).

P.S. В программе нужно объявить только классы. Выводить на экран ничего
не нужно.
"""
from typing import Union


class Singleton:
    """
    Реализация паттерна Singleton (Одиночка).

    Гарантирует, что у класса будет только один экземпляр,
    и предоставляет глобальную точку доступа к нему.

    :cvar _instance: Ссылка на единственный экземпляр класса
    """

    _instance: Union['Singleton', None] = None

    def __new__(cls, *args, **kwargs) -> 'Singleton':
        """
        Контролирует создание экземпляров класса.

        :return: Единственный экземпляр класса
        """
        if cls._instance is None:
            cls._instance = super().__new__(cls)

        return cls._instance


class Game(Singleton):
    """
    Класс игры, реализующий паттерн Singleton.

    :ivar name: Название игры (устанавливается при первом создании)
    """
    def __init__(self, name: str) -> None:
        """
        Инициализирует игру с указанным названием.

        Название устанавливается только при первом создании объекта.
        Последующие попытки изменить название игнорируются.

        :param name: Название игры
        """
        if not hasattr(self, 'name'):
            self.name = name

